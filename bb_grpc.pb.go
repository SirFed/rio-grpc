// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package blueboxproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlueBoxClient is the client API for BlueBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlueBoxClient interface {
	SetGPIObyOffset(ctx context.Context, in *GPIOselected, opts ...grpc.CallOption) (*ServerResponse, error)
	SetGPIObyAlias(ctx context.Context, in *GPIOselected, opts ...grpc.CallOption) (*ServerResponse, error)
}

type blueBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewBlueBoxClient(cc grpc.ClientConnInterface) BlueBoxClient {
	return &blueBoxClient{cc}
}

func (c *blueBoxClient) SetGPIObyOffset(ctx context.Context, in *GPIOselected, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/bbs.BlueBox/SetGPIObyOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueBoxClient) SetGPIObyAlias(ctx context.Context, in *GPIOselected, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/bbs.BlueBox/SetGPIObyAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlueBoxServer is the server API for BlueBox service.
// All implementations must embed UnimplementedBlueBoxServer
// for forward compatibility
type BlueBoxServer interface {
	SetGPIObyOffset(context.Context, *GPIOselected) (*ServerResponse, error)
	SetGPIObyAlias(context.Context, *GPIOselected) (*ServerResponse, error)
	mustEmbedUnimplementedBlueBoxServer()
}

// UnimplementedBlueBoxServer must be embedded to have forward compatible implementations.
type UnimplementedBlueBoxServer struct {
}

func (UnimplementedBlueBoxServer) SetGPIObyOffset(context.Context, *GPIOselected) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGPIObyOffset not implemented")
}
func (UnimplementedBlueBoxServer) SetGPIObyAlias(context.Context, *GPIOselected) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGPIObyAlias not implemented")
}
func (UnimplementedBlueBoxServer) mustEmbedUnimplementedBlueBoxServer() {}

// UnsafeBlueBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlueBoxServer will
// result in compilation errors.
type UnsafeBlueBoxServer interface {
	mustEmbedUnimplementedBlueBoxServer()
}

func RegisterBlueBoxServer(s grpc.ServiceRegistrar, srv BlueBoxServer) {
	s.RegisterService(&BlueBox_ServiceDesc, srv)
}

func _BlueBox_SetGPIObyOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPIOselected)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueBoxServer).SetGPIObyOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbs.BlueBox/SetGPIObyOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueBoxServer).SetGPIObyOffset(ctx, req.(*GPIOselected))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlueBox_SetGPIObyAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPIOselected)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueBoxServer).SetGPIObyAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbs.BlueBox/SetGPIObyAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueBoxServer).SetGPIObyAlias(ctx, req.(*GPIOselected))
	}
	return interceptor(ctx, in, info, handler)
}

// BlueBox_ServiceDesc is the grpc.ServiceDesc for BlueBox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlueBox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bbs.BlueBox",
	HandlerType: (*BlueBoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetGPIObyOffset",
			Handler:    _BlueBox_SetGPIObyOffset_Handler,
		},
		{
			MethodName: "SetGPIObyAlias",
			Handler:    _BlueBox_SetGPIObyAlias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bb.proto",
}
